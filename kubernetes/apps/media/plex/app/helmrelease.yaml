---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app plex
  namespace: media
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: intel-device-plugin-gpu
      namespace: kube-system
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    controllers:
      plex:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/plex
              tag: 1.42.2.10156@sha256:9ad8a3506e1d8ebda873a668603c1a2c10e6887969564561be669efd65ae8871
            env:
              TZ: "${TIMEZONE}"
              PLEX_ADVERTISE_URL: https://plex.${SECRET_DOMAIN}:443,http://192.168.16.125:32400
              PLEX_NO_AUTH_NETWORKS: 192.168.0.0/16
            resources:
              requests:
                cpu: 2
              limits:
                gpu.intel.com/i915: 1
                memory: 12Gi
    service:
      app:
        controller: plex
        type: LoadBalancer
        annotations:
          external-dns.alpha.kubernetes.io/hostname: "{{ .Release.Name }}.${SECRET_DOMAIN}"
          metallb.universe.tf/loadBalancerIPs: 192.168.16.125
        ports:
          http:
            port: 32400
    ingress:
      app:
        enabled: true
        className: nginx
        annotations:
          hajimari.io/icon: mdi:plex
          nginx.ingress.kubernetes.io/app-root: /web
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # nginx.ingress.kubernetes.io/server-snippet: |
          #   location ~ ^/library/streams {
          #     proxy_set_header        Range "";
          #     proxy_pass              http://plex.media.svc.cluster.local:32400;
          #     proxy_http_version      1.1;
          #   }
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
    defaultPodOptions:
      hostname: *app
      securityContext:
        runAsUser: "${MEDIA_SECURITY_CONTEXT_RUN_AS_USER}"
        runAsGroup: "${MEDIA_SECURITY_CONTEXT_RUN_AS_GROUP}"
        fsGroup: "${MEDIA_SECURITY_CONTEXT_RUN_AS_GROUP}"
        fsGroupChangePolicy: OnRootMismatch
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values: ["frigate"]
              topologyKey: kubernetes.io/hostname
    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        storageClass: ceph-block
        accessMode: ReadWriteOnce
        size: 100Gi
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server
      cache:
        enabled: true
        type: persistentVolumeClaim
        storageClass: ceph-block
        accessMode: ReadWriteOnce
        size: 100Gi
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Cache
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Logs
      tv:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            path: "/warehouse/media/tv"
            server: "${NFS_SERVER}"
        globalMounts:
          - path: /library/tv
      movies:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            path: "/warehouse/media/movies"
            server: "${NFS_SERVER}"
        globalMounts:
          - path: /library/movies
      music:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            path: "/warehouse/media/music"
            server: "${NFS_SERVER}"
        globalMounts:
          - path: /library/music
      tmp:
        type: emptyDir
      transcode:
        type: emptyDir
